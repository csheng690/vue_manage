{"remainingRequest":"C:\\Users\\G3-Cc\\Desktop\\Manage the project\\vue_manage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\G3-Cc\\Desktop\\Manage the project\\vue_manage\\src\\components\\power\\Roles.vue?vue&type=style&index=0&id=08ac19b3&lang=less&scoped=true&","dependencies":[{"path":"C:\\Users\\G3-Cc\\Desktop\\Manage the project\\vue_manage\\src\\components\\power\\Roles.vue","mtime":1621266035980},{"path":"C:\\Users\\G3-Cc\\Desktop\\Manage the project\\vue_manage\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\G3-Cc\\Desktop\\Manage the project\\vue_manage\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\G3-Cc\\Desktop\\Manage the project\\vue_manage\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\G3-Cc\\Desktop\\Manage the project\\vue_manage\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\G3-Cc\\Desktop\\Manage the project\\vue_manage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\G3-Cc\\Desktop\\Manage the project\\vue_manage\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLXRhZyB7CiAgbWFyZ2luOiA3cHg7Cn0KLmJkdG9wIHsKICBib3JkZXItdG9wOiAxcHggc29saWQgI2VlZTsKfQouYmRib3R0b20gewogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlOwp9Ci52Y2VudGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0K"},{"version":3,"sources":["Roles.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Roles.vue","sourceRoot":"src/components/power","sourcesContent":["<template>\n  <div>\n    <!-- 面包屑导航区 -->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>权限管理</el-breadcrumb-item>\n      <el-breadcrumb-item>角色列表</el-breadcrumb-item>\n    </el-breadcrumb>\n   \n  </div>\n</template>\n\n<script>\nexport default {\n  // data () {\n  //   return {\n  //     // 所有角色列表\n  //     rolesList: [],\n  //     // 分配权限框\n  //     setRightDialogVisible: false,\n  //     // 权限列表\n  //     rightsList: [],\n  //     //  树形控件的属性绑定对象\n  //     treeProps: {\n  //       label: 'authName',\n  //       children: 'children'\n  //     },\n  //     //   默认选中节点ID值\n  //     defKeys: [],\n  //     //   添加用户对话框\n  //     AddRoleDialogVisible: false,\n  //     // 添加角色表单\n  //     addRoleForm: {},\n  //     //   添加角色表单验证\n  //     addRoleFormRules: {\n  //       roleName: [\n  //         { required: true, message: '请输入角色名称', trigger: 'blur' }\n  //       ],\n  //       roleDesc: [\n  //         { required: true, message: '请输入角色描述', trigger: 'blur' }\n  //       ]\n  //     },\n  //     //   编辑角色信息\n  //     editRoleForm: {},\n  //     editRoleDialogVisible: false,\n  //     editRoleFormRules: {\n  //       roleName: [\n  //         { required: true, message: '请输入角色名称', trigger: 'blur' }\n  //       ],\n  //       roleDesc: [\n  //         { required: true, message: '请输入角色描述', trigger: 'blur' }\n  //       ]\n  //     },\n  //     //   当前即将分配权限的Id\n  //     roleId: 0\n  //   }\n  // },\n  // created () {\n  //   this.getRolesList()\n  // },\n  // methods: {\n  //   async getRolesList () {\n  //     const { data: res } = await this.$http.get('roles')\n  //     if (res.meta.status !== 200) {\n  //       return this.$message.error('获取角色列表失败！')\n  //     }\n  //     this.rolesList = res.data\n  //   },\n  //   // 根据ID删除对应的权限\n  //   async removeRightById (role, rightId) {\n  //     // 弹框提示 删除\n  //     const confirmResult = await this.$confirm(\n  //       '此操作将永久删除该权限, 是否继续?',\n  //       '提示',\n  //       {\n  //         confirmButtonText: '确定',\n  //         cancelButtonText: '取消',\n  //         type: 'warning'\n  //       }\n  //     ).catch(err => err)\n  //     // 点击确定 返回值为：confirm\n  //     // 点击取消 返回值为： cancel\n  //     if (confirmResult !== 'confirm') {\n  //       return this.$message.info('已取消权限删除')\n  //     }\n  //     const { data: res } = await this.$http.delete(\n  //       `roles/${role.id}/rights/${rightId}`\n  //     )\n  //     if (res.meta.status !== 200) {\n  //       return this.$message.error('删除权限失败！')\n  //     }\n  //     role.children = res.data\n  //     //   不建议使用\n  //     // this.getRolesList()\n  //   },\n  //   // 分配权限\n  //   async showSetRightDialog (role) {\n  //     this.roleId = role.id\n  //     // 获取角色的所有权限\n  //     const { data: res } = await this.$http.get('rights/tree')\n  //     if (res.meta.status !== 200) {\n  //       return this.$message.error('获取权限数据失败！')\n  //     }\n  //     //   获取权限树\n  //     this.rightsList = res.data\n  //     //   console.log(res)\n  //     //   递归获取三级节点的id\n  //     this.getLeafkeys(role, this.defKeys)\n\n  //     this.setRightDialogVisible = true\n  //   },\n  //   // 通过递归 获取角色下三级权限的 id, 并保存到defKeys数组\n  //   getLeafkeys (node, arr) {\n  //     // 没有children属性，则是三级节点\n  //     if (!node.children) {\n  //       return arr.push(node.id)\n  //     }\n  //     node.children.forEach(item => this.getLeafkeys(item, arr))\n  //   },\n  //   // 权限对话框关闭事件\n  //   setRightDialogClosed () {\n  //     this.defKeys = []\n  //   },\n  //   // 添加角色对话框的关闭\n  //   addRoleDialogClosed () {\n  //     this.$refs.addRoleFormRef.resetFields()\n  //   },\n  //   // 添加角色\n  //   addRoles () {\n  //     this.$refs.addRoleFormRef.validate(async valid => {\n  //       if (!valid) return\n  //       const { data: res } = await this.$http.post('roles', this.addRoleForm)\n  //       if (res.meta.status !== 201) {\n  //         this.$message.error('添加角色失败！')\n  //       }\n  //       this.$message.success('添加角色成功！')\n  //       this.AddRoleDialogVisible = false\n  //       this.getRolesList()\n  //     })\n  //   },\n  //   // 删除角色\n  //   async removeRoleById (id) {\n  //     const confirmResult = await this.$confirm(\n  //       '此操作将永久删除该角色, 是否继续?',\n  //       '提示',\n  //       {\n  //         confirmButtonText: '确定',\n  //         cancelButtonText: '取消',\n  //         type: 'warning'\n  //       }\n  //     ).catch(err => err)\n  //     if (confirmResult !== 'confirm') {\n  //       return this.$message.info('已取消删除')\n  //     }\n  //     const { data: res } = await this.$http.delete('roles/' + id)\n  //     if (res.meta.status !== 200) return this.$message.error('删除角色失败！')\n  //     this.$message.success('删除用户成功！')\n  //     this.getRolesList()\n  //   },\n  //   // 编辑角色\n  //   async showEditDialog (id) {\n  //     const { data: res } = await this.$http.get('roles/' + id)\n  //     if (res.meta.status !== 200) return this.$message.error('查询角色信息失败！')\n  //     this.editRoleForm = res.data\n  //     this.editRoleDialogVisible = true\n  //   },\n  //   editRoles () {\n  //     this.$refs.editRoleFormRef.validate(async valid => {\n  //       // console.log(valid)\n  //       // 表单预校验失败\n  //       if (!valid) return\n  //       const { data: res } = await this.$http.put(\n  //         'roles/' + this.editRoleForm.roleId,\n  //         {\n  //           roleName: this.editRoleForm.roleName,\n  //           roleDesc: this.editRoleForm.roleDesc\n  //         }\n  //       )\n  //       if (res.meta.status !== 200) {\n  //         this.$message.error('更新角色信息失败！')\n  //       }\n  //       // 隐藏编辑角色对话框\n  //       this.editRoleDialogVisible = false\n  //       this.$message.success('更新角色信息成功！')\n  //       this.getRolesList()\n  //     })\n  //   },\n  //   // 分配权限\n  //   async allotRights (roleId) {\n  //     // 获得当前选中和半选中的Id\n  //     const keys = [\n  //       ...this.$refs.treeRef.getCheckedKeys(),\n  //       ...this.$refs.treeRef.getHalfCheckedKeys()\n  //     ]\n  //     // join() 方法用于把数组中的所有元素放入一个字符串\n  //     const idStr = keys.join(',')\n  //     const { data: res } = await this.$http.post(`roles/${this.roleId}/rights`, { rids: idStr })\n  //     if (res.meta.status !== 200) { return this.$message.error('分配权限失败！') }\n  //     this.$message.success('分配权限成功!')\n  //     this.getRolesList()\n  //     this.setRightDialogVisible = false\n  //   }\n  // }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.el-tag {\n  margin: 7px;\n}\n.bdtop {\n  border-top: 1px solid #eee;\n}\n.bdbottom {\n  border-bottom: 1px solid #eee;\n}\n.vcenter {\n  display: flex;\n  align-items: center;\n}\n</style>\n"]}]}